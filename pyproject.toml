[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dedalus-docs-mcp-server"
version = "1.0.0"
description = "An MCP server for serving and querying documentation with AI capabilities"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["mcp", "ai", "documentation", "dedalus", "llm", "agent"]

dependencies = [
    "mcp>=0.1.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "aiofiles>=23.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]

dedalus = [
    "dedalus-labs>=0.1.0",
]

embeddings = [
    "sentence-transformers>=2.0.0",
    "numpy>=1.24.0",
    "faiss-cpu>=1.7.0",
]

llm = [
    "openai>=1.0.0",
    "anthropic>=0.15.0",
    "tiktoken>=0.5.0",
]

all = [
    "dedalus-docs-mcp-server[dedalus,embeddings,llm]",
]

[project.urls]
Homepage = "https://github.com/yourusername/dedalus-docs-mcp-server"
Documentation = "https://github.com/yourusername/dedalus-docs-mcp-server#readme"
Repository = "https://github.com/yourusername/dedalus-docs-mcp-server.git"
Issues = "https://github.com/yourusername/dedalus-docs-mcp-server/issues"

[project.scripts]
docs-mcp-server = "src.server:main"
dedalus-docs-mcp = "src.server:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.json"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
]